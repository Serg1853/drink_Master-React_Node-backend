{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Drink-Master API docs - OpenAPI 3.1",
    "description": "Swagger documentation for project Drink-Master"
  },
  "servers": [
    {
      "url": "https://drink-master-project-zi2s.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Users",
      "description": "User endpoints"
    },
    {
      "name": "Filters",
      "description": "Filter cocktails"
    }
  ],

  "paths": {
    "/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "description": "Register new user",
        "requestBody": {
          "description": "Registration's object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/SignUpResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/EmailInUse"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "description": "Login existed user",
        "requestBody": {
          "description": "Login object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SignInResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/InvalidCredentials"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/auth/signout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "description": "Logout existed user",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "The user is logged out"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["Users"],
        "summary": "Get information about the current user",
        "description": "Get information about the current user",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CurrentUserResponse"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/users/update/name": {
      "patch": {
        "tags": ["Users"],
        "summary": "Add or update user name",
        "description": "Add or update user name",
        "requestBody": {
          "description": "Update user name",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateName"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],

        "responses": {
          "200": {
            "$ref": "#/components/responses/UserResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/users/update/avatar": {
      "patch": {
        "tags": ["Users"],
        "summary": "Add or update user avatar",
        "description": "Add or update user avatar",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "description": "User avatar image",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatarURL": {
                    "type": "string",
                    "format": "binary",
                    "description": "User's avatar image file"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AvatarsResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/filters/categories": {
      "get": {
        "tags": ["Filters"],
        "summary": "Filter categories",
        "description": "Filter cocktails from categories",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CategoriesResponse"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/filters/glasses": {
      "get": {
        "tags": ["Filters"],
        "summary": "Filter glasses",
        "description": "Filter cocktails from glasses",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GlassesResponse"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/filters/ingredients": {
      "get": {
        "tags": ["Filters"],
        "summary": "Filter ingredients",
        "description": "Filter cocktails from ingredients",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IngredientsResponse"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  },

  "components": {
    "responses": {
      "Unauthorized": {
        "description": "User must be logged in to perfotm this action (401)",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "examples": ["Not authorized"]
                }
              }
            }
          }
        }
      },
      "InvalidCredentials": {
        "description": "Invalid email or password (401)",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "examples": ["Invalid email or password"]
                }
              }
            }
          }
        }
      },
      "EmailInUse": {
        "description": "Email in use (409)",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "examples": ["Email in use"]
                }
              }
            }
          }
        }
      },
      "ServerError": {
        "description": "Server error (500)",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "examples": ["Server error"]
                }
              }
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad request - invalid request body (400)",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "SignUpResponse": {
        "description": "User successfully registered",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "description": "Bearer token",
                  "examples": [
                    " eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1Y2NlMThmNGRmMTkxMDhmNDI1NTg2ZCIsImlhdCI6MTcwODA5NDg2NX0.bHdV2mw9Xfz1PxzB54rz9_8IpgkTeAyuzGRzP-j3FOg"
                  ]
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User's email",
                      "format": "email"
                    },
                    "avatarURL": {
                      "type": "string",
                      "description": "User avatar path",
                      "examples": [
                        "//www.gravatar.com/avatar/97d3723787b96f4804a076d9d009dfdf"
                      ]
                    },
                    "age": {
                      "type": "number",
                      "description": "User age"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SignInResponse": {
        "description": "User successfully logged in",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "description": "Bearer token",
                  "examples": [
                    " eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1Y2NlMThmNGRmMTkxMDhmNDI1NTg2ZCIsImlhdCI6MTcwODA5NDg2NX0.bHdV2mw9Xfz1PxzB54rz9_8IpgkTeAyuzGRzP-j3FOg"
                  ]
                },
                "user": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "CurrentUserResponse": {
        "description": "Information about user",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "UserResponse": {
        "description": "The user's name is updated",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserUpdateName"
            }
          }
        }
      },
      "AvatarsResponse": {
        "description": "The user's avatar is updated",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "User avatar file",
              "properties": {
                "avatarURL": {
                  "type": "string",
                  "description": "User avatar path",
                  "examples": [
                    "//www.gravatar.com/avatar/97d3723787b96f4804a076d9d009dfdf"
                  ]
                }
              }
            }
          }
        }
      },
      "CategoriesResponse": {
        "description": "Successfully get categories",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Cocktails id",
                  "examples": ["6vNFPFUs4HmkLZYYYDpBr"]
                },
                "name": {
                  "type": "string",
                  "description": "Name cocktails",
                  "examples": ["Beer"]
                }
              }
            }
          }
        }
      },
      "GlassesResponse": {
        "description": "Successfully get glasses",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Cocktails id",
                  "examples": ["frsAJ4SHPYqZeG-83QTVW"]
                },
                "name": {
                  "type": "string",
                  "description": "Name cocktails",
                  "examples": ["Highball glass"]
                }
              }
            }
          }
        }
      },
      "IngredientsResponse": {
        "description": "Successfully get glasses",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Cocktails id",
                  "examples": ["64aebb7f82d96cc69e0eb4a5"]
                },
                "title": {
                  "type": "string",
                  "description": "Name cocktails",
                  "examples": ["Applejack"]
                },
                "ingredientThumb": {
                  "type": "string",
                  "description": "Picture cocktails",
                  "examples": [
                    "https://ftp.goit.study/img/drinkify/ingredients/Applejack.png"
                  ]
                },
                "thumb-medium": {
                  "type": "string",
                  "description": "Picture cocktails",
                  "examples": [
                    "https://ftp.goit.study/img/drinkify/ingredients/Applejack-Medium.png"
                  ]
                },
                "thumb-small": {
                  "type": "string",
                  "description": "Picture cocktails",
                  "examples": [
                    "https://ftp.goit.study/img/drinkify/ingredients/Applejack-Small.png"
                  ]
                },
                "abv": {
                  "type": "string",
                  "examples": ["40"]
                },
                "alcohol": {
                  "type": "string"
                },
                "description": {
                  "type": "string",
                  "description": "Description cocktail"
                },
                "type": {
                  "type": "string",
                  "examples": ["Beverage"]
                },
                "flavour": {
                  "type": "string",
                  "examples": ["apples, oak"]
                },
                "country": {
                  "type": "string",
                  "examples": ["United States"]
                }
              }
            }
          }
        }
      }
    },

    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 32,
            "examples": ["Max Payne"]
          },
          "avatarURL": {
            "type": "string",
            "description": "User avatar path",
            "examples": [
              "//www.gravatar.com/avatar/97d3723787b96f4804a076d9d009dfdf"
            ]
          }
        }
      },
      "SignUpRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 32,
            "examples": ["Max Payne"]
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 64,
            "description": "User's password",
            "format": "password",
            "examples": ["qwerty123"]
          },
          "age": {
            "type": "number",
            "description": "User age",
            "examples": ["25"]
          }
        }
      },
      "SignInRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 64,
            "description": "User's password",
            "format": "password",
            "examples": ["qwerty123"]
          }
        }
      },
      "UserUpdateName": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 32,
            "examples": ["Vlad"]
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
